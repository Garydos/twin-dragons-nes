byte draw_counter
//flags for drawing
bool changed_column
bool changed_meta_column
bool changed_attr_column
bool changed_screen

pointer current_level_tiles
pointer current_level_attrs

void load_attr_column(byte screen_column, byte nametable, word attrs_column) {
    byte i
    pointer attrs_ptr
    attrs_ptr = get_attrs_column(attrs_column)

    //set ppu address increment to 1 so we can draw the left and right borders
    //(allows us to draw to the nametable in vertical strips rather than horizontal)
    ppu_ctrl = %00000000

    read_ppu_status()
    for i,1,until,$08 {
        if nametable == 0 {
            ppu_set_addr(ppu_attrtable0 + (i<<3) + screen_column)
        }
        else if nametable == 1 {
            ppu_set_addr(ppu_attrtable1 + (i<<3) + screen_column)
        }
        else if nametable == 2 {
            ppu_set_addr(ppu_attrtable2 + (i<<3) + screen_column)
        }
        else if nametable == 3 {
            ppu_set_addr(ppu_attrtable3 + (i<<3) + screen_column)
        }

        ppu_write_data(attrs_ptr[i])
    }
}

void load_attr_column_with_counter(byte screen_column, byte nametable, word attrs_column) {
    pointer attrs_ptr
    attrs_ptr = get_attrs_column(attrs_column)

    //set ppu address increment to 1 so we can draw the left and right borders
    //(allows us to draw to the nametable in vertical strips rather than horizontal)
    ppu_ctrl = %00000000
    read_ppu_status()

    if draw_counter == 0 || draw_counter == 3 {
        load_attr_first_draw(nametable, screen_column, attrs_ptr)
    }
    else if draw_counter == 4 {
        load_attr_second_draw(nametable, screen_column, attrs_ptr)
    }
}

inline void load_attr_first_draw(byte nametable, byte screen_column, pointer attrs_ptr) {
    byte i
    for i,1,until,$05 {
        if nametable == 0 {
            ppu_set_addr(ppu_attrtable0 + (i<<3) + screen_column)
        }
        else if nametable == 1 {
            ppu_set_addr(ppu_attrtable1 + (i<<3) + screen_column)
        }
        else if nametable == 2 {
            ppu_set_addr(ppu_attrtable2 + (i<<3) + screen_column)
        }
        else if nametable == 3 {
            ppu_set_addr(ppu_attrtable3 + (i<<3) + screen_column)
        }

        ppu_write_data(attrs_ptr[i])
    }
    draw_counter = 4
}

inline void load_attr_second_draw(byte nametable, byte screen_column, pointer attrs_ptr) {
    byte i
    for i,5,until,$08 {
        if nametable == 0 {
            ppu_set_addr(ppu_attrtable0 + (i<<3) + screen_column)
        }
        else if nametable == 1 {
            ppu_set_addr(ppu_attrtable1 + (i<<3) + screen_column)
        }
        else if nametable == 2 {
            ppu_set_addr(ppu_attrtable2 + (i<<3) + screen_column)
        }
        else if nametable == 3 {
            ppu_set_addr(ppu_attrtable3 + (i<<3) + screen_column)
        }

        ppu_write_data(attrs_ptr[i])
    }
    draw_counter = 0
}

inline pointer get_attrs_column(word metatiles_column) {
    pointer attrs_ptr
    attrs_ptr = current_level_attrs
    metatiles_column <<= 3 // *= $08
    attrs_ptr += metatiles_column
    return attrs_ptr
}

inline void draw_full_screen(byte screen_num) {
    //draw the full screen at nametable 0, plus
    //two extra metatile/attribute columns so that
    //you can scroll both ways if needed
    word metatile_column
    word attr_column
    
    metatile_column = screen_num
    metatile_column <<= 4
    
    if screen_num != 0 {
        //draw one column to the left of the visible screen
        metatile_column -= 1
        draw_column(15,1,metatile_column)
        metatile_column += 1
        
        attr_column = metatile_column
        attr_column >>= 1
        attr_column -= 1
        load_attr_column(7,1,attr_column)
    }
    draw_full_screen_meta(0, metatile_column)
    if screen_num != max_screen {
        //draw one column to the right of the visible screen
        metatile_column += 16
        draw_column(0,1,metatile_column)
        metatile_column -= 16
        
        attr_column = metatile_column
        attr_column >>= 1
        attr_column += 8
        load_attr_column(0,1,attr_column)
    }
}

void draw_full_screen_meta(byte nametable, word metatile_column) {
    //draw a full screen starting from the specified metatile column
    load_attr_column(0,nametable,metatile_column>>1)
    draw_column(0,nametable,metatile_column)
    metatile_column += 1
    draw_column(1,nametable,metatile_column)
    metatile_column += 1
    load_attr_column(1,nametable,metatile_column>>1)
    draw_column(2,nametable,metatile_column)
    metatile_column += 1
    draw_column(3,nametable,metatile_column)
    metatile_column += 1
    load_attr_column(2,nametable,metatile_column>>1)
    draw_column(4,nametable,metatile_column)
    metatile_column += 1
    draw_column(5,nametable,metatile_column)
    metatile_column += 1
    load_attr_column(3,nametable,metatile_column>>1)
    draw_column(6,nametable,metatile_column)
    metatile_column += 1
    draw_column(7,nametable,metatile_column)
    metatile_column += 1
    load_attr_column(4,nametable,metatile_column>>1)
    draw_column(8,nametable,metatile_column)
    metatile_column += 1
    draw_column(9,nametable,metatile_column)
    metatile_column += 1
    load_attr_column(5,nametable,metatile_column>>1)
    draw_column(10,nametable,metatile_column)
    metatile_column += 1
    draw_column(11,nametable,metatile_column)
    metatile_column += 1
    load_attr_column(6,nametable,metatile_column>>1)
    draw_column(12,nametable,metatile_column)
    metatile_column += 1
    draw_column(13,nametable,metatile_column)
    metatile_column += 1
    load_attr_column(7,nametable,metatile_column>>1)
    draw_column(14,nametable,metatile_column)
    metatile_column += 1
    draw_column(15,nametable,metatile_column)
}

void draw_column_with_counter(byte screen_column, byte nametable, word metatiles_column) {
    pointer metatiles_ptr
    
    screen_column <<= 1 // *= 2, convert to metatile column #
    metatiles_ptr = get_metatile_column(metatiles_column)
    
    //set ppu address increment to 32 so we can draw the left and right borders
    //(allows us to draw to the nametable in vertical strips rather than horizontal)
    ppu_ctrl = %00000100
    read_ppu_status()
    
    if draw_counter == 0 || draw_counter == 1 {
        //draw the first column on the first frame
        draw_column_first_draw(nametable, screen_column, metatiles_ptr)
        draw_counter = 2
    }
    else if draw_counter == 2 {
        //draw the second column on the second frame
        draw_column_second_draw(nametable, screen_column, metatiles_ptr)
        draw_counter = 0
    }
}

inline void draw_column_first_draw(byte nametable, byte screen_column, pointer metatiles_ptr) {
    //first frame of the column draw
    //draws the leftmost column of the metatile column
    byte i
    
    if nametable == 0 {
        ppu_set_addr(ppu_nametable0 + $80 + screen_column)
    }
    else if nametable == 1 {
        ppu_set_addr(ppu_nametable1 + $80 + screen_column)
    }
    else if nametable == 2 {
        ppu_set_addr(ppu_nametable2 + $80 + screen_column)
    }
    else if nametable == 3 {
        ppu_set_addr(ppu_nametable3 + $80 + screen_column)
    }

    //skip to $02 because the metatile data is structured to ignore the
    //first two metatiles, and end before $0F because that byte is a junk
    //byte as well
    for i,$02,until,$0F {
        draw_metatile_first_column(metatiles_ptr[i])
    }
}

inline void draw_column_second_draw(byte nametable, byte screen_column, pointer metatiles_ptr) {
    //second frame of the column draw
    //draws the rightmost column of the metatile column
    byte i
    
    if nametable == 0 {
        ppu_set_addr(ppu_nametable0 + $80 + screen_column + 1)
    }
    else if nametable == 1 {
        ppu_set_addr(ppu_nametable1 + $80 + screen_column + 1)
    }
    else if nametable == 2 {
        ppu_set_addr(ppu_nametable2 + $80 + screen_column + 1)
    }
    else if nametable == 3 {
        ppu_set_addr(ppu_nametable3 + $80 + screen_column + 1)
    }
    
    //skip to $02 because the metatile data is structured to ignore the
    //first two metatiles, and end before $0F because that byte is a junk
    //byte as well
    for i,$02,until,$0F {
        draw_metatile_second_column(metatiles_ptr[i])
    }
}

void draw_column(byte screen_column, byte nametable, word metatiles_column) {
    byte i
    pointer metatiles_ptr
    
    screen_column <<= 1 // *= 2
    metatiles_ptr = get_metatile_column(metatiles_column)
    
    //set ppu address increment to 32 so we can draw the left and right borders
    //(allows us to draw to the nametable in vertical strips rather than horizontal)
    ppu_ctrl = %00000100
    read_ppu_status()
    
    if nametable == 0 {
        ppu_set_addr(ppu_nametable0 + $80 + screen_column)
    }
    else if nametable == 1 {
        ppu_set_addr(ppu_nametable1 + $80 + screen_column)
    }
    else if nametable == 2 {
        ppu_set_addr(ppu_nametable2 + $80 + screen_column)
    }
    else if nametable == 3 {
        ppu_set_addr(ppu_nametable3 + $80 + screen_column)
    }

    //skip to $02 because the metatile data is structured to ignore the
    //first two metatiles, and end before $0F because that byte is a junk
    //byte as well
    for i,$02,until,$0F {
        draw_metatile_first_column(metatiles_ptr[i])
    }
    
    
    if nametable == 0 {
        ppu_set_addr(ppu_nametable0 + $80 + screen_column + 1)
    }
    else if nametable == 1 {
        ppu_set_addr(ppu_nametable1 + $80 + screen_column + 1)
    }
    else if nametable == 2 {
        ppu_set_addr(ppu_nametable2 + $80 + screen_column + 1)
    }
    else if nametable == 3 {
        ppu_set_addr(ppu_nametable3 + $80 + screen_column + 1)
    }
    
    //skip to $02 because the metatile data is structured to ignore the
    //first two metatiles
    for i,$02,until,$0F {
        draw_metatile_second_column(metatiles_ptr[i])
    }
}

inline pointer get_metatile_column(word metatiles_column) {
    pointer metatiles_ptr
    metatiles_ptr = current_level_tiles
    metatiles_column <<= 4 // *= $10
    metatiles_ptr += metatiles_column
    return metatiles_ptr
}

inline void draw_metatile_first_column(byte metatile) {
    pointer metatile_ptr
    metatile_ptr = metatiles
    metatile_ptr += metatile << 2
    
    ppu_write_data(metatile_ptr[0])
    ppu_write_data(metatile_ptr[1])
}

inline void draw_metatile_second_column(byte metatile) {
    pointer metatile_ptr
    metatile_ptr = metatiles
    metatile_ptr += metatile << 2
    
    ppu_write_data(metatile_ptr[2])
    ppu_write_data(metatile_ptr[3])
}

inline byte get_tile(byte column, byte row) {
    //return the tile number of the tile
    //located at column by row
    //here, column refers to the 8 pixel wide
    //screen columns, not the 16 pixel wide
    //metatile columns
    byte metatile_column_num
    byte metatile_row_num
    byte tile
    pointer metatiles_column
    pointer metatile_ptr
    
    //get the metatile row and column numbers
    metatile_column_num = column >> 1
    metatile_row_num = row >> 1
    
    //get the metatile column data pointer
    metatiles_column = get_metatile_column(metatile_column_num)
    //store the metatile tile in the tile variable in preparation
    //for finding the proper screen tile number
    tile = metatiles_column[metatile_row_num]
    
    //now we can use the original column and row numbers to
    //get the proper tile
    metatile_ptr = metatiles
    metatile_ptr += tile << 2
    
    //convert column and row to metatile definition offsets
    column &= %00000001 //column now either 0 or 1 depending on odd or even
    column <<= 1        //column now either 0 or 2
    row &= %00000001    //row now either 0 or 1
    
    //get the proper tile from the new indices
    tile = metatile_ptr[column + row]
    
    return tile
}