struct Sprite { //NES hardware sprite layout
    byte y,         // Y Coordinate - 1
    byte tile,      // tile index #
    byte attrs,     // attributes
    byte x,         // X Coordinate
    bool even       // arbitrary value given to sprites
                    // by whatever object is using them to ensure proper sprite flickering.
                    // The value of this should be alternated 
                    // between the sprites of a metasprite (e.g. sprite0=even,sprite1=odd, etc...)
                    // to ensure sprites flicker properly.
}

array oam_buffer [256] @$200 // sprite buffer

const byte left_stack_lim = $04
const byte right_stack_lim = $FF
byte right_stack //stack variable for the left side of oam_buffer
byte left_stack //stack variable for the right side of oam_buffer
bool even_on_left_stack // Are the even sprites on the queue going on the left or right stack this frame?
                     // this value should be alternated every frame to ensure proper sprite
                     // flickering
                     
void init_sprite_manager() {
    left_stack = left_stack_lim //skip sprite 0
    right_stack = right_stack_lim
    even_on_left_stack = true
}

void add_sprite(Sprite spr) {
    if spr.even {
        if even_on_left_stack {
            add_to_left_stack(spr)
        }
        else {
            add_to_right_stack(spr)
        }
    }
    else {
        if even_on_left_stack {
            add_to_right_stack(spr)
        }
        else {
            add_to_left_stack(spr)
        }
    }
    even_on_left_stack = not(even_on_left_stack)
}

inline void add_to_left_stack(Sprite spr) {
    oam_buffer[left_stack] = spr.y
    oam_buffer[left_stack+1] = spr.tile
    oam_buffer[left_stack+2] = spr.attrs
    oam_buffer[left_stack+3] = spr.x
    
    left_stack += 4
}

inline void add_to_right_stack(Sprite spr) {
    oam_buffer[right_stack-3] = spr.y
    oam_buffer[right_stack-2] = spr.tile
    oam_buffer[right_stack-1] = spr.attrs
    oam_buffer[right_stack] = spr.x
    
    right_stack -= 4
}

void clear_stacks() {
    clear_left_stack()
    clear_right_stack()
}

inline void clear_left_stack() {
    while left_stack > left_stack_lim {
        left_stack -= 4 //sprites take up 4 bytes in hardware
        oam_buffer[left_stack] = $ef //move the sprite offscreen
    }
}
inline void clear_right_stack() {
    while right_stack < right_stack_lim {
        right_stack += 4 //sprites take up 4 bytes in hardware
        oam_buffer[right_stack-3] = $ef //move the sprite offscreen
    }
}

void init_sprites() {
    byte i
    for i,0,to,255 {
        if (i & %00000011) == 0 {
            //each sprite takes up 4 bytes, and we want to edit
            //the y position of each sprite (0th byte)
            //so we use the %00000011 mask to write every 4th byte (every 0th sprite byte)
            
            oam_buffer[i] = $ef // move the sprite off screen
        }
        else {
            oam_buffer[i] = 0
        }
    }
}

void prepare_sprite0() {
    //move sprite0 to overlap with bottom edge
    //of the status bar in preparation for splitting
    //the screen
    oam_buffer[0] = $16
    oam_buffer[1] = $FF
    oam_buffer[2] = $00
    oam_buffer[3] = $08
}