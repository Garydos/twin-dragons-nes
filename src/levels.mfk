import level0

//level column that the spawn triggers on, MUST BE SORTED LOW TO HIGH
array(word) spawn_column_locations [32] align(64)
//y-location (pixel row) the new object is spawned at, and it's type
//hi-byte is the type, lo-byte is the y-coordinate
array(word) spawn_info [32] align(64)
//the indices for this array correspond to the indices for each
//spawn location in spawn_column_locations
array spawner_flags [32] align(32)
//maximum spawn locations for this level
byte num_spawn_locations
//x-coordinate for enemies spawned while scrolling
const byte spawn_x_loc_right = $FA
const byte spawn_x_loc_left = $08

void load_level(byte level_num) {
    byte i
    word leftmost_column
    word rightmost_column
    word colnum
    word xloc
    
    if level_num == 0 {
        load_level0()
    }
    
    //load any enemies that spawn on the first screen
    leftmost_column = current_screen 
    leftmost_column <<= 5
    rightmost_column = leftmost_column
    rightmost_column += 32
    for i,0,until,num_spawn_locations {
        colnum = spawn_column_locations[i]
        if colnum >= leftmost_column && colnum < rightmost_column {
            xloc = colnum
            xloc -= leftmost_column
            xloc <<= 3
            spawn_enemy(spawn_info[i].hi,xloc.lo,spawn_info[i].lo, i)
        }
    }
}

void load_screen(byte screen_num) {
    current_screen = screen_num
    draw_full_screen(screen_num)
}

void draw_status_bar() {
    //draw the status bar accross both nametables
    byte i
    
    //set ppu address increment to 1 so we can draw the left and right borders
    //(allows us to draw to the nametable in vertical strips rather than horizontal)
    ppu_ctrl = %00000000
    read_ppu_status()
    
    //write to first nametable
    ppu_set_addr(ppu_nametable0+$40)
    ppu_write_data($24) //$24 = sky tile
    ppu_write_data($FF) //$11 = 'H'
    ppu_write_data($0E) //$0E = 'E'
    ppu_write_data($0A) //$0A = 'A'
    ppu_write_data($15) //$15 = 'L'
    ppu_write_data($1D) //$1D = 'T'
    ppu_write_data($11) //$11 = 'H'
    ppu_write_data($25) //$25 = colon
    ppu_write_data($34) //$34 = full box
    ppu_write_data($34) //$34 = full box
    ppu_write_data($35) //$35 = empty box
    ppu_write_data($24) //$24 = sky tile
    ppu_write_data($24) //$24 = sky tile
    ppu_write_data($24) //$24 = sky tile
    ppu_write_data($24) //$24 = sky tile
    ppu_write_data($24) //$24 = sky tile
    ppu_write_data($24) //$24 = sky tile
    ppu_write_data($24) //$24 = sky tile
    ppu_write_data($24) //$24 = sky tile
    ppu_write_data($24) //$24 = sky tile
    ppu_write_data($24) //$24 = sky tile
    ppu_write_data($24) //$24 = sky tile
    ppu_write_data($24) //$24 = sky tile
    ppu_write_data($24) //$24 = sky tile
    ppu_write_data($24) //$24 = sky tile
    ppu_write_data($24) //$24 = sky tile
    ppu_write_data($24) //$24 = sky tile
    ppu_write_data($26) //$26 = lives icon
    ppu_write_data($27) //$26 = multiply icon
    ppu_write_data($03) //$03 = 3
    
    //write to second nametable
    ppu_set_addr(ppu_nametable1+$40)
    ppu_write_data($24) //$24 = sky tile
    ppu_write_data($11) //$11 = 'H'
    ppu_write_data($0E) //$0E = 'E'
    ppu_write_data($0A) //$0A = 'A'
    ppu_write_data($15) //$15 = 'L'
    ppu_write_data($1D) //$1D = 'T'
    ppu_write_data($11) //$11 = 'H'
    ppu_write_data($25) //$25 = colon
    ppu_write_data($34) //$34 = full box
    ppu_write_data($34) //$34 = full box
    ppu_write_data($35) //$35 = empty box
    ppu_write_data($24) //$24 = sky tile
    ppu_write_data($24) //$24 = sky tile
    ppu_write_data($24) //$24 = sky tile
    ppu_write_data($24) //$24 = sky tile
    ppu_write_data($24) //$24 = sky tile
    ppu_write_data($24) //$24 = sky tile
    ppu_write_data($24) //$24 = sky tile
    ppu_write_data($24) //$24 = sky tile
    ppu_write_data($24) //$24 = sky tile
    ppu_write_data($24) //$24 = sky tile
    ppu_write_data($24) //$24 = sky tile
    ppu_write_data($24) //$24 = sky tile
    ppu_write_data($24) //$24 = sky tile
    ppu_write_data($24) //$24 = sky tile
    ppu_write_data($24) //$24 = sky tile
    ppu_write_data($24) //$24 = sky tile
    ppu_write_data($26) //$26 = lives icon
    ppu_write_data($27) //$26 = multiply icon
    ppu_write_data($03) //$03 = 3
}

void clear_status_bar() {
    //clear the status bar to all sky tiles
    byte i
    
    //set ppu address increment to 1 so we can draw the left and right borders
    //(allows us to draw to the nametable in vertical strips rather than horizontal)
    ppu_ctrl = %00000000
    read_ppu_status()
    
    ppu_set_addr(ppu_nametable0)
    for i,0,until,$80 {
        ppu_write_data($24) //$24 = sky tile
    }
    
    ppu_set_addr(ppu_nametable1)
    for i,0,until,$80 {
        ppu_write_data($24) //$24 = sky tile
    }
}

void load_palletes(byte pallete_num) {
    byte i
    read_ppu_status() // read PPU status to reset the high/low latch
    ppu_set_addr(ppu_pallete_ram) // point the PPU to palette ram
    if pallete_num == 0 {
        for i,0,until,$20 {
            ppu_write_data(pallete0[i])
        }
    }
}

const array pallete0 = [
  $21,$17,$18,$29,$21,$38,$18,$2A,$21,$39,$3A,$3B,$21,$3D,$3E,$0F, //nametable palettes
  $21,$09,$29,$36,$21,$10,$2D,$0F,$21,$00,$0F,$36,$21,$02,$38,$3C  //sprite palettes, first byte is the background color
]