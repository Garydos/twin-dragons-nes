volatile byte nametable //current nametable
volatile byte draw_nametable //the nametable we want to draw on
volatile byte draw_seam_column //screen column at the draw/scroll seam
volatile word next_column      //level column to be drawn to next
volatile byte current_screen   //screen to load next
byte max_screen       //final screen number
volatile byte xscroll          //screen x scroll value
volatile byte prev_xscroll     //previous xcroll value
volatile byte xscroll_attr          //screen x scroll value + attr offset
volatile byte prev_xscroll_attr     //previous xcroll value + attr offset
bool scrolling_right
bool scrolling_left
volatile byte previous_scroll //0 = scrolling right, 1 = scrolling left
volatile byte prev_meta_col_change //0 = passed right meta column, 1 = passed left meta column
const byte scroll_right_boundary = $88
const byte scroll_left_boundary = $68

//How many pixels before a new attribute table column
//is needed should we load them?  This is necessary because loading
//an attribute column and a tile column at the same time takes too
//much time for the nmi.
//Note: this should be changed to be greater than or equal to the max
//x velocity of the player (in pixels)
const byte attr_draw_offset = 8

void reset_scroll_flags() {
    scrolling_right = false
    scrolling_left = false
    changed_column = false
    changed_meta_column = false
    changed_attr_column = false
    changed_screen = false
}

void init_scroll_vars() {
    xscroll = 0
    xscroll_attr = 0 + attr_draw_offset
    nametable = 0
    draw_seam_column = 0
    draw_counter = 0
    previous_scroll = 0
    prev_meta_col_change = 0
}

macro void set_next_column() {
    //takes the draw_seam_column
    //and current_screen values and converts
    //them to the proper column number
    //for lookup in the level map, and stores
    //the result in next_column
    next_column = current_screen 
    next_column <<= 5
    next_column += draw_seam_column
}

inline void update_scroll_left() {
    prev_xscroll = xscroll
    xscroll -= scroll_speed
    prev_xscroll_attr = xscroll_attr
    xscroll_attr -= scroll_speed
    
    passed_column_boundary(xscroll, prev_xscroll)
    passed_meta_column_boundary(xscroll, prev_xscroll)
    passed_attr_column_boundary(xscroll_attr, prev_xscroll_attr)
    
    if xscroll > prev_xscroll {
        //we overflowed to a new screen
        current_screen -= 1
        if current_screen > max_screen {
            current_screen = 3
        }
        nametable ^= %00000001
    }
    if changed_column {
        draw_seam_column = xscroll >> 3
    }
    // on a 16 pixel boundary, so
    // load the appropriate tiles
    if changed_meta_column{
        decrement_draw_ptr(left_draw_tiles)
        decrement_draw_ptr(right_draw_tiles)
        //uncompress metatiles for the next draw
        uncompress_metatile_column(left_draw_tiles)
        //fill the new column in the collision page
        fill_collis_column_from_ptr((draw_seam_column >> 1),left_draw_tiles)
        prev_meta_col_change = 1
    }
    if changed_attr_column{
        decrement_attr_ptr(right_draw_attrs)
        decrement_attr_ptr(left_draw_attrs)
        uncompress_attr_column(left_draw_attrs)
    }
    
    
    //check if we need to load a new attribute column
    //by factoring in the attribute load offset
    
    if xscroll_attr > prev_xscroll_attr {
        changed_screen = true
        draw_nametable = nametable ^ %00000001
    }
    else {
        changed_screen = false
        draw_nametable = nametable
    }
}

inline void update_scroll_right() {
    prev_xscroll = xscroll
    xscroll += scroll_speed
    prev_xscroll_attr = xscroll_attr
    xscroll_attr += scroll_speed
    
    passed_column_boundary(xscroll, prev_xscroll)
    passed_meta_column_boundary(xscroll, prev_xscroll)
    passed_attr_column_boundary(xscroll_attr, prev_xscroll_attr)

    if xscroll < prev_xscroll {
        //we overflowed to a new screen
        current_screen += 1
        if current_screen > max_screen {
            current_screen = 0
        }
        nametable ^= %00000001
        changed_screen = true
    }
    else {
        changed_screen = false
    }
    if changed_column {
        //we've passed a column boundary, update our current column
        draw_seam_column = xscroll >> 3
    }
    
    // on a 16 pixel boundary, so
    // load the appropriate tiles
    if changed_meta_column{
        //fill the new column in the collision page
        if prev_meta_col_change != 0 {
            //if the last meta column changed loaded left_draw_tiles
            //into the uncompressed column array, then we need to load
            //right_draw_tiles's uncompressed column
            uncompress_metatile_column(right_draw_tiles)
        }
        fill_collis_column_from_ptr((xscroll >> 4) - 1,right_draw_tiles)
        increment_draw_ptr(right_draw_tiles)
        increment_draw_ptr(left_draw_tiles)
        //uncompress metatiles for the next draw
        uncompress_metatile_column(right_draw_tiles)
        prev_meta_col_change = 0
    }
    if changed_attr_column {
        increment_attr_ptr(left_draw_attrs)
        increment_attr_ptr(right_draw_attrs)
        uncompress_attr_column(right_draw_attrs)
    }
    
    //check if we need to load a new attribute column
    //by factoring in the attribute load offset

    if xscroll_attr < prev_xscroll_attr {
        changed_screen = true
        draw_nametable = nametable
    }
    else {
        changed_screen = false
        draw_nametable = nametable ^ %00000001
    }
    
}

macro void passed_column_boundary(byte xscroll_new, byte xscroll_old) {
    //compares the two, and then sets changed_column appropriately
    if (xscroll_new & %11111000) != (xscroll_old & %11111000) {
        changed_column = true
    }
    else {
        changed_column = false
    }
}

macro void passed_meta_column_boundary(byte xscroll_new, byte xscroll_old) {
    //compares the two, and then sets changed_meta_column appropriately
    if (xscroll_new & %11110000) != (xscroll_old & %11110000) {
        changed_meta_column = true
    }
    else {
        changed_meta_column = false
    }
}

macro void passed_attr_column_boundary(byte xscroll_new, byte xscroll_old) {
    //compares the two, and then sets changed_meta_column appropriately
    if (xscroll_new & %11100000) != (xscroll_old & %11100000) {
        changed_attr_column = true
    }
    else {
        changed_attr_column = false
    }
}


inline void left_metatile_scroll() {
    byte k
    
    if draw_counter == 0 && changed_attr_column{
        k = ((xscroll_attr>>5)-1) & %00000111
        //We want to offset the attribute column by 1 when scrolling left
        //so that it draws behind the edge of the screen, to do this
        //we convert xscroll_attr to the appropriate attribute column
        //by dividing by 32 (>>5), then subtracting by 1 to get the column
        //just off-screen. This can overflow however, so we use & %00000111
        //to make sure the result is always between 0 and 7 inclusive
        
        if k > 5{
            //k == 6 and k == 7 are the nametable change columns (since we offset
            //drawing the next attr column by 1), so in these instances we need
            //need to draw on the opposite nametable.  You could possibly simplify this
            //by creating a separate draw_nametable variable exclusively for
            //the attribute scrolling and keep track of it with 1 attr column offset there.
            draw_nametable = draw_nametable ^ %00000001
            load_attr_column_by_ptr(k,draw_nametable,left_draw_attrs)
        }
        else {
            load_attr_column_by_ptr(k,draw_nametable,left_draw_attrs)
        }
    }
    else if changed_meta_column || draw_counter > 0 {
        draw_column_with_counter_by_ptr_left((xscroll>>4),draw_nametable, left_draw_tiles)
    }
}

inline void right_metatile_scroll() {
    // use an else-if here
    // so that we don't load attrs and tiles
    // on the same frame, as that would take
    // too much time and bleed into screen rendering
    if draw_counter == 0 && changed_attr_column {
        load_attr_column_by_ptr((xscroll_attr>>5),draw_nametable,right_draw_attrs)
    }
    else if changed_meta_column || draw_counter > 0 {
        draw_column_with_counter_by_ptr((xscroll>>4),draw_nametable, right_draw_tiles)
    }
}

inline byte get_column_from_screenx(byte screenx) {
    word new_column_offset //must be a word because (xscroll+newplayerx) can overflow
    
    new_column_offset = xscroll
    new_column_offset += screenx
    new_column_offset >>= 3
    
    return new_column_offset.lo
}

inline byte get_row_from_screeny(byte screeny) {
    return screeny >> 3
}
