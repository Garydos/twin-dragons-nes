// compile with -t nes_small_v and -O1 (O4 is broken at the moment)

//use the dpad to move the player around
//use a to jump
//use b to dash and attack

import nes_joy
import nes_lib
import game_lib
import metatiles
import scrolling
import physics
import sprite_manager
import anims
import enemies
import music
import levels
import platformer

void main() {
    init_sprites()
    init_sprite_manager()
    load_palletes(0)
    clear_status_bar()
    draw_status_bar()
    prepare_sprite0()
    reset_collis_flags()
    reset_scroll_flags()
    init_scroll_vars()
    init_enemy_heap()
    init_spawner_flags()
    
    load_level(0)
    
    ppu_set_scroll(0,0)
    ppu_wait_vblank()
    ppu_ctrl = %10010000   // enable NMI, sprites from Pattern Table 0, background from Pattern Table 1
    ppu_mask = %00011000   // enable sprites, enable background, no clipping on left side

    new_frame = false
    while(true) {
        while new_frame == true {
            //wait for the new frame to be drawn
        }
        game_logic()
        new_frame = true
    }
}

void nmi() {
    if new_frame {
        //Do scroll handling before anything since it needs 
        //to set the scroll before the screen starts drawing
        handle_scrolling()
    }
    //set scroll to 0 for now so that the status bar
    //stays still
    ppu_set_scroll(0,0)
    ppu_ctrl = %00010000 // no need to or the nametable for this one,
                         // as the status bar should always be at the first nametable
    ppu_mask = %00011000
    
    //Transfer the sprites to the screen through DMA
    
    //NOTE: handle_scrolling sometimes takes so long that sprite DMA
    //bleeds into the drawing of the first scanline (particularly when crossing screens).  
    //For now, avoid having sprites appear at the very top of the screen and all should
    //still be well.
    ppu_oam_dma_write(oam_buffer.addr.hi)

    //first wait for the previous frame's sprite0 hit
    //to clear
   
    while (ppu_status & %01000000) != 0 {
    }
    
    //update the music
    // FamiToneUpdate()
    
    //start checking for a sprite0 hit
    //so that we know the status bar is done drawing
    
    //then wait for this frame's sprite0 hit
    while (ppu_status & %01000000) == 0 {
    }
    
    //now wait for the end of the scanline
    wait_cycles($10)
    
    //The status bar is done drawing, so draw the rest of
    //the screen with the correct scroll values
    ppu_set_scroll(xscroll,0)
    ppu_ctrl = %10010000 | nametable
    ppu_mask = %00011000
    
    if new_frame {
        new_frame = false
    }
}

void irq() {
}

segment(chrrom) const array graphics @ $0000 = file("graphics/twin_dragons.chr")