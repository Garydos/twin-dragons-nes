// compile with -t nes_small_v and -O1 (O4 is broken at the moment)

//use the dpad to move the player around
//use a to jump
//use b to attack

import nes_joy
import nes_lib
import game_lib
import metatiles
import scrolling
import physics
import sprite_manager
import anims
import enemies
import music
import levels
import platformer

volatile byte gamestate
volatile byte transition_timer

void init_game() {
    init_sprites()
    init_sprite_manager()
    ppu_oam_dma_write(oam_buffer.addr.hi)
    clear_status_bar()
    draw_status_bar()
    prepare_sprite0()
    reset_collis_flags()
    reset_scroll_flags()
    init_scroll_vars()
    init_enemy_heap()
    init_spawner_flags()
}

void init_game_and_load_level(byte level) {
    ppu_ctrl = %00000000   // disable NMI, sprites from Pattern Table 0, background from Pattern Table 1
    ppu_mask = %00000110   // enable sprites, enable background, no clipping on left side
    
    init_game()
    load_level(level)
    ppu_set_scroll(0,0)
    ppu_wait_vblank()
    
    ppu_ctrl = %10010000   // enable NMI, sprites from Pattern Table 0, background from Pattern Table 1
    ppu_mask = %00011110   // enable sprites, enable background, no clipping on left side
}

void main() {
    init_title_screen()
    while(true) {
        if gamestate == 0 {
            title_screen_main()
        }
        if gamestate == 1 {
            game_main()
        }
        else if gamestate == 2 {
            level_load_main()
        }
    }
}

void title_screen_main() {
    read_joy1()
    if input_start != 0 {
        transition_to_level(0)
    }
}

void game_main() {
    while new_frame == true {
        //wait for the new frame to be drawn
    }
    if touched_goal != 0 {
        scrolling_right = false
        scrolling_left = false
        new_frame = false
        transition_timer += 1
        if transition_timer >= $80 {
            transition_to_level(next_level)
        }
    }
    else {
        game_logic()
        if reset_level {
            init_game_and_load_level(current_level)
        }
    }
    new_frame = true
}

void level_load_main() {
    new_frame = true
    while new_frame == true {
        //wait for next frame
    }
    transition_timer += 1
    if transition_timer >= $A0 {
        transition_timer = 0
        gamestate = 1
        init_game_and_load_level(current_level)
    }
}

void nmi() {
    // use a return dispatch here
    // to use different logic for each screen/gamestate
    return [gamestate] {
        0    @ blank_nmi_no_sprites
        1    @ game_nmi
        2    @ blank_nmi_no_sprites
    }
}

void blank_nmi_no_sprites() {
    //do nothing except basic updates (also clear the sprites)
    init_sprites()
    ppu_oam_dma_write(oam_buffer.addr.hi)
    ppu_set_scroll(0,0)
    FamiToneUpdate()
    ppu_ctrl = %10010000
    ppu_mask = %00011110
    new_frame = false
}

void game_nmi() {
    if new_frame {
        //Do scroll handling before anything since it needs 
        //to set the scroll before the screen starts drawing
        handle_scrolling()
    }
    
    draw_health_p1()
    
    //set scroll to 0 for now so that the status bar
    //stays still
    ppu_set_scroll(0,0)
    ppu_ctrl = %00010000 // no need to or the nametable for this one,
                         // as the status bar should always be at the first nametable
    ppu_mask = %00011110
    
    //Transfer the sprites to the screen through DMA
    if new_frame {
        //NOTE: handle_scrolling sometimes takes so long that sprite DMA
        //bleeds into the drawing of the first scanline (particularly when crossing screens).  
        //For now, avoid having sprites appear at the very top of the screen and all should
        //still be well.
        ppu_oam_dma_write(oam_buffer.addr.hi)
    }

    //first wait for the previous frame's sprite0 hit
    //to clear
   
    while (ppu_status & %01000000) != 0 {
    }
    
    //update the music/sfx while waiting for the
    //status bar
    FamiToneUpdate()
    
    //then wait for this frame's sprite0 hit
    while (ppu_status & %01000000) == 0 {
    }
    
    //now wait for the end of the scanline
    wait_cycles($02)
    
    //The status bar is done drawing, so draw the rest of
    //the screen with the correct scroll values
    ppu_set_scroll(xscroll,0)
    ppu_ctrl = %10010000 | nametable
    ppu_mask = %00011110
    
    if new_frame {
        new_frame = false
    }
    
    //compiler bug: registers are not restored during the original NMI vector,
    //but they are backed up onto the stack, so we need to restore them here
    byte a_sav
    byte x_sav
    byte y_sav
    //first we set the stack to point at where on_nmi originally
    //stored A,X, and Y
    asm {
        TSX
        TXA
        CLC
        ADC #$06
        TAX
        TXS
    }
    //now we get those register values backed up onto the stack by on_nmi
    //and also restore the stack pointer
    asm {
        PLA
        STA y_sav
        PLA
        STA x_sav
        PLA
        STA a_sav
        TSX
        TXA
        SEC
        SBC #$09
        TAX
        TXS
    }
    //finally we load up our saved register values
    asm {
        LDA y_sav
        TAY
        LDA x_sav
        TAX
        LDA a_sav
    }
}

void irq() {
}

void init_title_screen() {
    ppu_ctrl = %00000000   // disable NMI, sprites from Pattern Table 0, background from Pattern Table 1
    ppu_mask = %00000110   // enable sprites, enable background, no clipping on left side

    gamestate = 0
    ppu_wait_vblank() //wait for next vblank so NMI thread is using the current gamestate
    FamiToneInit($01, twin_dragons_ost.addr)
    FamiToneMusicPlay($00)
    load_palletes(2)
    load_black_background()
    ppu_set_addr(ppu_nametable0 + $80 + $0A)
    
    ppu_write_data('T'ascii)
    ppu_write_data('W'ascii)
    ppu_write_data('I'ascii)
    ppu_write_data('N'ascii)
    ppu_write_data(' 'ascii)
    ppu_write_data('D'ascii)
    ppu_write_data('R'ascii)
    ppu_write_data('A'ascii)
    ppu_write_data('G'ascii)
    ppu_write_data('O'ascii)
    ppu_write_data('N'ascii)
    ppu_write_data('S'ascii)
    
    ppu_set_addr(ppu_nametable0 + $C0 + $0B)
    ppu_write_data('A'ascii)
    ppu_write_data('R'ascii)
    ppu_write_data('T'ascii)
    ppu_write_data(' 'ascii)
    ppu_write_data('@'ascii)
    ppu_write_data('S'ascii)
    ppu_write_data('U'ascii)
    ppu_write_data('R'ascii)
    ppu_write_data('T'ascii)
    
    ppu_set_addr(ppu_nametable0 + $E0 + $04)
    ppu_write_data('E'ascii)
    ppu_write_data('V'ascii)
    ppu_write_data('E'ascii)
    ppu_write_data('R'ascii)
    ppu_write_data('Y'ascii)
    ppu_write_data('T'ascii)
    ppu_write_data('H'ascii)
    ppu_write_data('I'ascii)
    ppu_write_data('N'ascii)
    ppu_write_data('G'ascii)
    ppu_write_data(' 'ascii)
    ppu_write_data('E'ascii)
    ppu_write_data('L'ascii)
    ppu_write_data('S'ascii)
    ppu_write_data('E'ascii)
    ppu_write_data(' 'ascii)
    ppu_write_data('@'ascii)
    ppu_write_data('G'ascii)
    ppu_write_data('A'ascii)
    ppu_write_data('R'ascii)
    ppu_write_data('Y'ascii)
    ppu_write_data('D'ascii)
    ppu_write_data('O'ascii)
    ppu_write_data('S'ascii)
    
    ppu_set_addr(ppu_nametable0 + $240 + $09)
    ppu_write_data('A'ascii)
    ppu_write_data('L'ascii)
    ppu_write_data('P'ascii)
    ppu_write_data('H'ascii)
    ppu_write_data('A'ascii)
    ppu_write_data(' 'ascii)
    ppu_write_data('V'ascii)
    ppu_write_data('E'ascii)
    ppu_write_data('R'ascii)
    ppu_write_data('S'ascii)
    ppu_write_data('I'ascii)
    ppu_write_data('O'ascii)
    ppu_write_data('N'ascii)


    
    ppu_set_addr(ppu_nametable0 + $280 + $09)
    ppu_write_data('P'ascii)
    ppu_write_data('R'ascii)
    ppu_write_data('E'ascii)
    ppu_write_data('S'ascii)
    ppu_write_data('S'ascii)
    ppu_write_data(' 'ascii)
    ppu_write_data('S'ascii)
    ppu_write_data('T'ascii)
    ppu_write_data('A'ascii)
    ppu_write_data('R'ascii)
    ppu_write_data('T'ascii)
    
    init_sprites()
    ppu_oam_dma_write(oam_buffer.addr.hi)
    ppu_set_scroll(0,0)
    ppu_wait_vblank()
    
    ppu_ctrl = %10010000   // enable NMI, sprites from Pattern Table 0, background from Pattern Table 1
    ppu_mask = %00011110   // enable sprites, enable background, no clipping on left side
}

segment(chrrom) const array graphics @ $0000 = file("graphics/twin_dragons.chr")