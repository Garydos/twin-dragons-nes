//counter for draw routines
volatile byte draw_counter
//flags for drawing
volatile bool changed_column
volatile bool changed_meta_column
volatile bool changed_attr_column
volatile bool changed_screen
//metatiles and attributes for current level
volatile pointer current_level_tiles
volatile pointer current_level_tiles_end
volatile pointer current_level_attrs
volatile pointer current_level_attrs_end
//pointers to the right and left screen metatiles
//from the current level to be loaded next.
volatile pointer right_draw_tiles
volatile pointer left_draw_tiles
//pointers to the right and left screen attributes
//from the current level to be loaded next.
volatile pointer right_draw_attrs
volatile pointer left_draw_attrs
//place to store an uncompressed metatile column
array uncompressed_meta_column[16]
//place to store an uncompressed attr column
array uncompressed_attr_column[8]

void uncompress_attr_column(pointer attrs_ptr) {
    if attrs_ptr < current_level_attrs || attrs_ptr >= current_level_attrs_end {
        return
    }
    //Attribute columns are stored as RLE compressed bytes,
    //this function uncompresses a column and stores
    //it in uncompressed_attr_column
    //
    //Works basically the same as uncompress_metatile_column, see
    //the comments in that function for more details
    byte i
    byte j
    byte k
    byte l
    
    j = 0
    i = 0
    l = 0
    while j < $08{
        k = attrs_ptr[i]
        while k > 0 {
            uncompressed_attr_column[l] = attrs_ptr[i+1]
            l += 1
            k -= 1
        }
        j += attrs_ptr[i]
        i += 2
    }
}

void uncompress_metatile_column(pointer metatiles_ptr) {
    if metatiles_ptr < current_level_tiles || metatiles_ptr >= current_level_tiles_end {
        return
    }
    //Metatile columns are stored as RLE compressed bytes,
    //this function uncompresses a column and stores
    //it in uncompressed_meta_column
    byte i
    byte j
    byte k
    byte l
    
    j = 0
    i = 0
    l = 0
    //j keeps track of the amount of tiles we have written in total.
    //a column is 16 metatiles, so we want to stop once we've reached
    //that amount in total
    while j < $10{
        //first byte of RLE encoded column indicates how many of
        //this metatile are to be written
        k = metatiles_ptr[i]
        while k > 0 {
            //now loop through and write the appropriate amount
            //of tiles
            uncompressed_meta_column[l] = metatiles_ptr[i+1]
            l += 1
            k -= 1
        }
        //add to our running counter of the amount of tiles
        //we've written so far
        j += metatiles_ptr[i]
        //advance to the next set of bytes
        i += 2
    }
}

void fill_collis_column_from_ptr(byte col_num, pointer draw_tiles) {
    byte i
    
    col_num <<= 4 // *= 16

    for i,0,until,$10 {
        metatile_collis_map[col_num+i] = uncompressed_meta_column[i]
    }
}

macro void increment_draw_ptr(pointer draw_tiles) {
    byte i

    if draw_tiles >= current_level_tiles && draw_tiles < current_level_tiles_end {
        i = 0
        while i < $10 {
            i += draw_tiles[0]
            draw_tiles += 2
        }
    }
    else {
        draw_tiles += 1
    }
}

macro void increment_draw_ptr_by_screen(pointer draw_tiles) {
    byte k
    for k,0,until,$10 {
        increment_draw_ptr(draw_tiles)
    }
}

macro void decrement_draw_ptr(pointer draw_tiles) {
    byte i
    
    if draw_tiles > current_level_tiles && draw_tiles <= current_level_tiles_end {
        i = 0
        while i < $10 {
            draw_tiles -= 2
            i += draw_tiles[0]
        }
    }
    else {
        draw_tiles -= 1
    }
}

macro void decrement_draw_ptr_by_screen(pointer draw_tiles) {
    byte k
    for k,0,until,$10 {
        decrement_draw_ptr(draw_tiles)
    }
}

macro void increment_attr_ptr(pointer draw_attrs) {
    byte i

    if draw_attrs >= current_level_attrs && draw_attrs < current_level_attrs_end {
        i = 0
        while i < $08 {
            i += draw_attrs[0]
            draw_attrs += 2
        }
    }
    else {
        draw_attrs += 1
    }
}

macro void increment_attr_ptr_by_screen(pointer draw_attrs) {
    byte k
    for k,0,until,$08 {
        increment_attr_ptr(draw_attrs)
    }
}

macro void decrement_attr_ptr(pointer draw_attrs) {
    byte i
    
    if draw_attrs > current_level_attrs && draw_attrs <= current_level_attrs_end {
        i = 0
        while i < $08 {
            draw_attrs -= 2
            i += draw_attrs[0]
        }
    }
    else {
        draw_attrs -= 1
    }
}

macro void decrement_attr_ptr_by_screen(pointer draw_attrs) {
    byte k
    for k,0,until,$08 {
        decrement_attr_ptr(draw_attrs)
    }
}

void load_attr_column_by_ptr(byte screen_column, byte nametable, pointer attrs_ptr) {
    byte i

    //set ppu address increment to 1 so we can draw the left and right borders
    //(allows us to draw to the nametable in vertical strips rather than horizontal)
    ppu_ctrl = %00000000

    read_ppu_status()
    for i,1,until,$08 {
        if nametable == 0 {
            ppu_set_addr(ppu_attrtable0 + (i<<3) + screen_column)
        }
        else if nametable == 1 {
            ppu_set_addr(ppu_attrtable1 + (i<<3) + screen_column)
        }
        else if nametable == 2 {
            ppu_set_addr(ppu_attrtable2 + (i<<3) + screen_column)
        }
        else if nametable == 3 {
            ppu_set_addr(ppu_attrtable3 + (i<<3) + screen_column)
        }

        ppu_write_data(uncompressed_attr_column[i])
    }
}

void draw_column_with_counter_by_ptr(byte screen_column, byte nametable, pointer metatiles_ptr) {
    screen_column <<= 1 // *= 2, convert to metatile column number
    
    //set ppu address increment to 32 so we can draw the left and right borders
    //(allows us to draw to the nametable in vertical strips rather than horizontal)
    ppu_ctrl = %00000100
    read_ppu_status()
        
    if draw_counter == 0 || draw_counter == 1 {
        //draw the first column on the first frame
        draw_column_first_draw(nametable, screen_column, metatiles_ptr)
        draw_counter = 2
    }
    else if draw_counter == 2 {
        //draw the second column on the second frame
        draw_column_second_draw(nametable, screen_column, metatiles_ptr)
        draw_counter = 0
    }
}

void draw_column_with_counter_by_ptr_left(byte screen_column, byte nametable, pointer metatiles_ptr) {
    //use this function when scrolling left, it's the same as the regular function
    //but draws the rightmost column of the metatile first
    
    screen_column <<= 1 // *= 2, convert to metatile column #
    
    //set ppu address increment to 32 so we can draw the left and right borders
    //(allows us to draw to the nametable in vertical strips rather than horizontal)
    ppu_ctrl = %00000100
    read_ppu_status()
    
    if draw_counter == 0 || draw_counter == 1 {
        //draw the second column on the first frame
        draw_column_second_draw(nametable, screen_column, metatiles_ptr)
        draw_counter = 2
    }
    else if draw_counter == 2 {
        //draw the first column on the second frame
        draw_column_first_draw(nametable, screen_column, metatiles_ptr)
        draw_counter = 0
    }
}

inline void draw_column_first_draw(byte nametable, byte screen_column, pointer metatiles_ptr) {
    //first frame of the column draw
    //draws the leftmost column of the metatile column
    byte i
    
    if nametable == 0 {
        ppu_set_addr(ppu_nametable0 + $80 + screen_column)
    }
    else if nametable == 1 {
        ppu_set_addr(ppu_nametable1 + $80 + screen_column)
    }
    else if nametable == 2 {
        ppu_set_addr(ppu_nametable2 + $80 + screen_column)
    }
    else if nametable == 3 {
        ppu_set_addr(ppu_nametable3 + $80 + screen_column)
    }
    
    //skip to $02 because the metatile data is structured to ignore the
    //first two metatiles, and end before $0F because that byte is a junk
    //byte as well
    for i,$02,until,$0F {
        draw_metatile_first_column(uncompressed_meta_column[i])
    }
}

inline void draw_column_second_draw(byte nametable, byte screen_column, pointer metatiles_ptr) {
    //second frame of the column draw
    //draws the rightmost column of the metatile column
    byte i
    
    if nametable == 0 {
        ppu_set_addr(ppu_nametable0 + $80 + screen_column + 1)
    }
    else if nametable == 1 {
        ppu_set_addr(ppu_nametable1 + $80 + screen_column + 1)
    }
    else if nametable == 2 {
        ppu_set_addr(ppu_nametable2 + $80 + screen_column + 1)
    }
    else if nametable == 3 {
        ppu_set_addr(ppu_nametable3 + $80 + screen_column + 1)
    }
    
    //skip to $02 because the metatile data is structured to ignore the
    //first two metatiles, and end before $0F because that byte is a junk
    //byte as well
    for i,$02,until,$0F {
        draw_metatile_second_column(uncompressed_meta_column[i])
    }
}

inline void draw_metatile_first_column(byte metatile) {
    pointer metatile_ptr
    
    if metatile == $FF {
        ppu_write_data($FF)
        ppu_write_data($FF)
    }
    else {
        metatile_ptr = metatiles
        metatile_ptr += metatile << 2
        
        ppu_write_data(metatile_ptr[0])
        ppu_write_data(metatile_ptr[1])
    }
}

inline void draw_metatile_second_column(byte metatile) {
    pointer metatile_ptr
    
    if metatile == $FF {
        ppu_write_data($FF)
        ppu_write_data($FF)
    }
    else {
        metatile_ptr = metatiles
        metatile_ptr += metatile << 2
        
        ppu_write_data(metatile_ptr[2])
        ppu_write_data(metatile_ptr[3])
    }
}

byte get_screen_tile(byte column, byte row) {
    //return the tile number of the tile
    //located at column by row
    //here, column refers to the 8 pixel wide
    //screen columns, not the 16 pixel wide
    //metatile columns
    pointer metatile_ptr
    byte index
    byte temp
    byte tile //used to store both metatile and screen tile

    index = 0
    //add in the xscroll column
    // index = xscroll & %11110000
    temp = column
    if temp >= $20 {
        temp -= $20
    }
    temp >>= 1
    temp <<= 4
    index += temp
    temp = row
    temp >>= 1
    index += temp

    tile = metatile_collis_map[index]
    
    if tile != $FF {
        //convert column and row to metatile definition offsets
        column &= %00000001 //column now either 0 or 1 depending on odd or even
        column <<= 1        //column now either 0 or 2
        row &= %00000001    //row now either 0 or 1
        //now we can use the original column and row numbers to
        //get the proper tile
        metatile_ptr = metatiles
        metatile_ptr += tile << 2
        
        //get the proper tile from the new indices
        tile = metatile_ptr[column + row]
    }
    
    return tile
}

//define each metatile
//should correspond to metatiles in metatiles.png
const array metatiles = [
			//Tile positions:
			//top-left	bot-left	top-right	bot-right
            $24,		$24,		$24,		$24,
            $D0,		$D2,		$D1,		$D3,
            $04,        $06,        $05,        $07,
            $08,        $0A,        $09,        $0B,
            $0C,        $0E,        $0D,        $0F,
            $10,        $12,        $11,        $13,
            $14,        $16,        $15,        $17,
            $C0,        $C2,        $C1,        $C3,
            $1C,        $1E,        $1D,        $1F,
            $00,        $02,        $01,        $03,
            $C4,        $C6,        $C5,        $C7,
            $24,        $CA,        $C9,        $CB,
            $CC,        $CE,        $24,        $CF,
            $E0,        $E2,        $E1,        $E3,
            $E4,        $E6,        $E5,        $E7,
            $E8,        $EA,        $E9,        $EB,
            $EC,        $EE,        $ED,        $EF,
            $A0,        $A2,        $A1,        $A3,
            $24,        $A6,        $24,        $A7,
            $24,        $24,        $24,        $AB,
            $F0,        $F2,        $F1,        $F3,
            $D4,        $D6,        $D5,        $D7,
            $68,        $6A,        $69,        $6B
            
]