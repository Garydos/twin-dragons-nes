const byte max_enemies = 8

array(Enemy) enemy_heap [max_enemies] @$400
array(Enemy_Aux) enemy_aux_heap [max_enemies] align(32)
//Enemies will grab an available index number for enemy_heap from
//available_enemy_heap_spots when they're spawned
array available_enemy_heap_spots [max_enemies] align(16)
byte enemy_heap_spots_top
array current_enemies [max_enemies] align(16)
byte current_enemy_count

void init_enemy_heap() {
    byte i
    
    for i,0,until,max_enemies {
        //refill the available heap spot stack
        available_enemy_heap_spots[i] = max_enemies - 1 - i
    }
    enemy_heap_spots_top = max_enemies
    current_enemy_count = 0
}

inline byte get_enemy_heap_spot() {
    byte spot
    
    enemy_heap_spots_top -= 1
    spot = available_enemy_heap_spots[enemy_heap_spots_top]
    current_enemies[current_enemy_count] = spot
    current_enemy_count += 1
    return spot
}

inline void return_enemy_heap_spot(byte spot) {
    byte i
    
    available_enemy_heap_spots[enemy_heap_spots_top] = spot
    enemy_heap_spots_top += 1
    
    i = 0
    while current_enemies[i] != spot {
        i += 1
    }
    while i < current_enemy_count {
        current_enemies[i] = current_enemies[i+1]
    }
    current_enemy_count -= 1
}

void spawn_enemy(byte type, byte x, byte y, byte spawner_index) {
    //spawn enemy of type type at position (x,y)
    byte heap_spot
    
    heap_spot = get_enemy_heap_spot()
    enemy_heap[heap_spot].pos.x = x
    enemy_heap[heap_spot].pos.y = y
    enemy_heap[heap_spot].xfrac = 0
    enemy_heap[heap_spot].yfrac = 0
    enemy_heap[heap_spot].xvel = 0
    enemy_heap[heap_spot].yvel = 0
    enemy_heap[heap_spot].id = heap_spot
    enemy_heap[heap_spot].enemy_type = type
    enemy_aux_heap[heap_spot].spawner = spawner_index

    if type == 0 {
        init_boomba(heap_spot)
    }
}

inline void init_boomba(byte heap_spot) {
    enemy_heap[heap_spot].pos.width = 16
    enemy_heap[heap_spot].pos.height = 16
    enemy_heap[heap_spot].anim.anim_num = 1
    enemy_heap[heap_spot].anim.anim_frame = 0
    enemy_heap[heap_spot].anim.frame_timer = 0
    enemy_heap[heap_spot].mirroring = false
    //use aux0 as a timer for the jump
    enemy_aux_heap[heap_spot].aux0 = 0
    //use aux1 as a jump flag
    enemy_aux_heap[heap_spot].aux1 = 0
    //use aux2 as yaccel
    enemy_aux_heap[heap_spot].aux2 = 0
}

inline void cap_phys_obj_vel(pointer.Phys_Obj obj_ptr) {
    //cap velocity
    if obj_ptr->xvel >= player_max_xvel {
        obj_ptr->xvel = player_max_xvel
        obj_ptr->xfrac = 0
    }
    if obj_ptr->xvel <= player_max_xvel_neg {
        obj_ptr->xvel = player_max_xvel_neg
        obj_ptr->xfrac = 0
    }    
    
    if obj_ptr->yvel >= player_max_yvel {
        obj_ptr->yvel = player_max_yvel
        obj_ptr->yfrac = 0
    }
    if obj_ptr->yvel <= player_max_yvel_neg {
        obj_ptr->yvel = player_max_yvel_neg
        obj_ptr->yfrac = 0
    }
}

inline void phys_obj_apply_gravity(pointer.Phys_Obj obj_ptr) {
    obj_ptr->yvel += player_gravity_accel
}

Sprite test_sprite
inline void handle_enemy_anims() {
    byte i
    pointer.Enemy enemy_ptr
    
    for i,0,until,current_enemy_count {
        enemy_ptr = pointer.Enemy(enemy_heap[current_enemies[i]].addr)
        
        if enemy_ptr->enemy_type == 0 {
            handle_boomba_anims(enemy_ptr)
        }
    }
}

inline void handle_boomba_anims(pointer.Enemy enemy_ptr) {
    handle_player_anim(pointer.Anim(enemy_ptr->anim.addr), enemy_ptr->pos.x, enemy_ptr->pos.y, enemy_ptr->mirroring)
}

inline void handle_enemy_phys(pointer.Enemy enemy_ptr) {
    if enemy_ptr->enemy_type == 0 {
        handle_boomba_phys(enemy_ptr)
    }
}

inline void handle_boomba_phys(pointer.Enemy enemy_ptr) {
    cap_phys_obj_vel(pointer.Phys_Obj(enemy_ptr))
    check_obj_collis_and_update_loc(pointer.Phys_Obj(enemy_ptr))
}

inline void handle_enemy_logic(pointer.Enemy enemy_ptr) {
    if enemy_ptr->enemy_type == 0 {
        handle_boomba_logic(enemy_ptr)
    }
}

inline void handle_boomba_logic(pointer.Enemy enemy_ptr) {
    byte yaccel
    byte jumping
    byte jump_timer
    
    jump_timer = enemy_aux_heap[enemy_ptr->id].aux0
    jumping = enemy_aux_heap[enemy_ptr->id].aux1
    yaccel = enemy_aux_heap[enemy_ptr->id].aux2
    
    if jumping == 1 {
        //we're currently jumping
        if yaccel < 18 && enemy_ptr->yvel != 0 {
            yaccel += 2
            enemy_ptr->yvel -= (yaccel >> 2)
        }
        else {
            jumping = 0
            phys_obj_apply_gravity(pointer.Phys_Obj(enemy_ptr))
        }
        
        if enemy_ptr->yvel == 0 {
            //we've hit the ground, and are
            //no longer jumping
            jumping = 0
        }
    }
    else {
        phys_obj_apply_gravity(pointer.Phys_Obj(enemy_ptr))
    }
    
    if not(enemy_ptr->on_ground) {
        enemy_ptr->xvel = -4
    }
    else {
        enemy_ptr->xvel = 0
    }

    if jump_timer >= $40 && jumping == 0{
        jump_timer = 0
        jumping = 1
        yaccel = 2
        enemy_ptr->on_slope = 0
        enemy_ptr->on_ground = false_macro()
        enemy_ptr->yvel = -1
    }
    
    if jump_timer < $40 {
        jump_timer += 1
    }
    
    enemy_aux_heap[enemy_ptr->id].aux0 = jump_timer
    enemy_aux_heap[enemy_ptr->id].aux1 = jumping
    enemy_aux_heap[enemy_ptr->id].aux2 = yaccel
}

inline void prepare_enemy_scroll(sbyte scroll_speed_signed) {
    byte i
    
    for i,0,until,current_enemy_count {
        enemy_heap[current_enemies[i]].pos.x += scroll_speed_signed
    }
}

void update_enemies() {
    byte i
    pointer.Enemy enemy_ptr
    
    for i,0,until,current_enemy_count {
        enemy_ptr = pointer.Enemy(enemy_heap[current_enemies[i]].addr)
        
        handle_enemy_logic(enemy_ptr)
        handle_enemy_phys(enemy_ptr)
    }
}