const byte max_enemies = 16

array(Enemy) enemy_heap [max_enemies] align(128)
//Enemies will grab an available index number for enemy_heap from
//available_enemy_heap_spots when they're spawned
array available_enemy_heap_spots [max_enemies]
byte enemy_heap_spots_top
array current_enemies [max_enemies]
byte current_enemy_count

void init_enemy_heap() {
    byte i
    
    for i,0,until,max_enemies {
        //refill the available heap spot stack
        available_enemy_heap_spots[i] = i
    }
    enemy_heap_spots_top = max_enemies
    current_enemy_count = 0
}

inline byte get_enemy_heap_spot() {
    byte spot
    
    enemy_heap_spots_top -= 1
    spot = available_enemy_heap_spots[enemy_heap_spots_top]
    current_enemies[current_enemy_count] = spot
    current_enemy_count += 1
    return spot
}

inline void return_enemy_heap_spot(byte spot) {
    byte i
    
    available_enemy_heap_spots[enemy_heap_spots_top] = spot
    enemy_heap_spots_top += 1
    
    i = 0
    while current_enemies[i] != spot {
        i += 1
    }
    while i < current_enemy_count {
        current_enemies[i] = current_enemies[i+1]
    }
    current_enemy_count -= 1
}

void spawn_enemy(byte type, byte x, byte y) {
    //spawn enemy of type type at position (x,y)
    byte heap_spot
    
    heap_spot = get_enemy_heap_spot()
    enemy_heap[heap_spot].pos.x = x
    enemy_heap[heap_spot].pos.y = y
    enemy_heap[heap_spot].pos.width = 8
    enemy_heap[heap_spot].pos.height = 8
    enemy_heap[heap_spot].xfrac = 0
    enemy_heap[heap_spot].yfrac = 0
    enemy_heap[heap_spot].xvel = 0
    enemy_heap[heap_spot].yvel = 0
    enemy_heap[heap_spot].xaccel = 0
    enemy_heap[heap_spot].yaccel = 0
    enemy_heap[heap_spot].id = heap_spot
    enemy_heap[heap_spot].enemy_type = type
    enemy_heap[heap_spot].mirroring = false
}

inline void cap_phys_obj_vel(pointer.Phys_Obj obj_ptr) {
    //cap velocity
    if obj_ptr->xvel >= player_max_xvel {
        obj_ptr->xvel = player_max_xvel
        obj_ptr->xfrac = 0
    }
    if obj_ptr->xvel <= player_max_xvel_neg {
        obj_ptr->xvel = player_max_xvel_neg
        obj_ptr->xfrac = 0
    }    
    
    if obj_ptr->yvel >= player_max_yvel {
        obj_ptr->yvel = player_max_yvel
        obj_ptr->yfrac = 0
    }
    if obj_ptr->yvel <= player_max_yvel_neg {
        obj_ptr->yvel = player_max_yvel_neg
        obj_ptr->yfrac = 0
    }
}

inline void phys_obj_apply_gravity(pointer.Phys_Obj obj_ptr) {
    obj_ptr->yaccel = player_gravity_accel
    obj_ptr->yvel += obj_ptr->yaccel
}

Sprite test_sprite
inline void handle_enemy_anims() {
    byte i
    pointer.Enemy enemy_ptr
    
    for i,0,until,current_enemy_count {
        enemy_ptr = pointer.Enemy(enemy_heap[current_enemies[i]].addr)
        test_sprite.y = enemy_ptr->pos.y
        test_sprite.tile = $00
        test_sprite.attrs = $00
        test_sprite.x = enemy_ptr->pos.x
        test_sprite.even = true
        
        add_sprite_to_queue(test_sprite)
    }
}

inline void handle_enemy_phys(pointer.Enemy enemy_ptr) {
    phys_obj_apply_gravity(pointer.Phys_Obj(enemy_ptr))
    cap_phys_obj_vel(pointer.Phys_Obj(enemy_ptr))
    check_obj_collis_and_update_loc(pointer.Phys_Obj(enemy_ptr))
}

inline void handle_enemy_logic(pointer.Enemy enemy_ptr) {
    enemy_ptr->xvel = 4
}

inline void prepare_enemy_scroll(sbyte scroll_speed_signed) {
    byte i
    
    for i,0,until,current_enemy_count {
        enemy_heap[current_enemies[i]].pos.x += scroll_speed_signed
    }
}



void update_enemies() {
    byte i
    pointer.Enemy enemy_ptr
    
    for i,0,until,current_enemy_count {
        enemy_ptr = pointer.Enemy(enemy_heap[current_enemies[i]].addr)
        handle_enemy_logic(enemy_ptr)
        handle_enemy_phys(enemy_ptr)
    }
}