import boomba
import flowa
import fireball

const byte max_enemies = 8

array(Enemy) enemy_heap [max_enemies] @$400
array(Enemy_Aux) enemy_aux_heap [max_enemies] align(32)
//Enemies will grab an available index number for enemy_heap from
//available_enemy_heap_spots when they're spawned
array available_enemy_heap_spots [max_enemies] align(8)
byte enemy_heap_spots_top
array current_enemies [max_enemies] align(8)
byte current_enemy_count
array enemy_remove_queue [max_enemies] align(8)
byte enemy_remove_count

void init_enemy_heap() {
    byte i
    
    for i,0,until,max_enemies {
        //refill the available heap spot stack
        available_enemy_heap_spots[i] = max_enemies - 1 - i
    }
    enemy_heap_spots_top = max_enemies
    current_enemy_count = 0
    enemy_remove_count = 0
}

void add_to_enemy_remove_queue(byte id, byte spawner_flag) {
    //Pass a spawner_flag value of $FF to not respawn this enemy
    enemy_remove_queue[enemy_remove_count] = id
    enemy_remove_count += 1
    if spawner_flag != $FF {
        spawner_flags[spawner_flag] = 0
    }
}

void clear_enemy_remove_queue() {
    while enemy_remove_count > 0 {
        return_enemy_heap_spot(enemy_remove_queue[enemy_remove_count-1])
        enemy_remove_count -= 1
    }
}

byte get_enemy_heap_spot() {
    byte spot
    
    enemy_heap_spots_top -= 1
    spot = available_enemy_heap_spots[enemy_heap_spots_top]
    current_enemies[current_enemy_count] = spot
    current_enemy_count += 1
    return spot
}

void return_enemy_heap_spot(byte spot) {
    byte i
    
    available_enemy_heap_spots[enemy_heap_spots_top] = spot
    enemy_heap_spots_top += 1
    
    i = 0
    while current_enemies[i] != spot {
        i += 1
    }
    while i < current_enemy_count {
        current_enemies[i] = current_enemies[i+1]
        i += 1
    }
    current_enemy_count -= 1
}

byte spawn_enemy(byte type, byte x, byte y, byte spawner_index) {
    //spawn enemy of type type at position (x,y)
    byte heap_spot
    
    heap_spot = get_enemy_heap_spot()
    enemy_heap[heap_spot].pos.x = x
    enemy_heap[heap_spot].pos.y = y
    enemy_heap[heap_spot].xfrac = 0
    enemy_heap[heap_spot].yfrac = 0
    enemy_heap[heap_spot].xvel = 0
    enemy_heap[heap_spot].yvel = 0
    enemy_heap[heap_spot].id = heap_spot
    enemy_heap[heap_spot].enemy_type = type
    enemy_aux_heap[heap_spot].spawner = spawner_index

    if type == 0 {
        init_boomba(heap_spot)
    }
    else if type == 1 {
        init_flowa(heap_spot)
    }
    else if type == 2 {
        init_fireball(heap_spot)
    }
    
    return heap_spot
}

void cap_phys_obj_vel(pointer.Phys_Obj obj_ptr) {
    //cap velocity
    if obj_ptr->xvel >= player_max_xvel {
        obj_ptr->xvel = player_max_xvel
        obj_ptr->xfrac = 0
    }
    if obj_ptr->xvel <= player_max_xvel_neg {
        obj_ptr->xvel = player_max_xvel_neg
        obj_ptr->xfrac = 0
    }    
    
    if obj_ptr->yvel >= player_max_yvel {
        obj_ptr->yvel = player_max_yvel
        obj_ptr->yfrac = 0
    }
    if obj_ptr->yvel <= player_max_yvel_neg {
        obj_ptr->yvel = player_max_yvel_neg
        obj_ptr->yfrac = 0
    }
}

inline void phys_obj_apply_gravity(pointer.Phys_Obj obj_ptr) {
    obj_ptr->yvel += player_gravity_accel
}

void handle_enemy_anims() {
    byte i
    pointer.Enemy enemy_ptr
    
    for i,0,until,current_enemy_count {
        enemy_ptr = pointer.Enemy(enemy_heap[current_enemies[i]].addr)
        
        if enemy_ptr->enemy_type == 0 || enemy_ptr->enemy_type == 128{
            handle_boomba_anims(enemy_ptr)
        }
        else if enemy_ptr->enemy_type == 1 || enemy_ptr->enemy_type == 129{
            handle_flowa_anims(enemy_ptr)
        }
        else if enemy_ptr->enemy_type == 2 || enemy_ptr->enemy_type == 130{
            handle_fireball_anims(enemy_ptr)
        }
    }
}

void handle_enemy_phys(pointer.Enemy enemy_ptr) {
    if enemy_ptr->enemy_type == 0 || enemy_ptr->enemy_type == 128{
        handle_boomba_phys(enemy_ptr)
    }
    else if enemy_ptr->enemy_type == 1 || enemy_ptr->enemy_type == 129{
        handle_flowa_phys(enemy_ptr)
    }
    else if enemy_ptr->enemy_type == 2 || enemy_ptr->enemy_type == 130{
        handle_fireball_phys(enemy_ptr)
    }
}

void handle_enemy_logic(pointer.Enemy enemy_ptr) {
    if enemy_ptr->enemy_type & %10000000 != 0 {
        //Death flag is on, so handle the death animation
        if enemy_ptr->enemy_type == (128 + 0) {
            handle_boomba_death_logic(enemy_ptr)
        }
        else if enemy_ptr->enemy_type == (128 + 1) {
            handle_flowa_death_logic(enemy_ptr)
        }
        else if enemy_ptr->enemy_type == (128 + 2) {
            handle_fireball_death_logic(enemy_ptr)
        }
    }
    if enemy_ptr->enemy_type == 0 {
        handle_boomba_logic(enemy_ptr)
    }
    else if enemy_ptr->enemy_type == 1 {
        handle_flowa_logic(enemy_ptr)
    }
    else if enemy_ptr->enemy_type == 2 {
        handle_fireball_logic(enemy_ptr)
    }
}

void hurt_player(pointer.Enemy enemy_ptr) {
    if box_collis_check(player1.pos.x,player1.pos.y,player1.pos.width,player1.pos.height,enemy_ptr->pos.x,enemy_ptr->pos.y,enemy_ptr->pos.width,enemy_ptr->pos.height) {
        player_hit(1,enemy_ptr->pos.x)
    }
}

inline void prepare_enemy_scroll(sbyte scroll_speed_signed) {
    byte i
    
    for i,0,until,current_enemy_count {
        enemy_heap[current_enemies[i]].pos.x += scroll_speed_signed
    }
}

void update_enemies() {
    byte i
    pointer.Enemy enemy_ptr
    
    for i,0,until,current_enemy_count {
        enemy_ptr = pointer.Enemy(enemy_heap[current_enemies[i]].addr)
        
        handle_enemy_logic(enemy_ptr)
        handle_enemy_phys(enemy_ptr)
        if enemy_ptr->enemy_type & %10000000 == 0 {
            hurt_player(enemy_ptr)
        }
    }
    
    clear_enemy_remove_queue()
}

void snap_enemy_limits() {
    byte i
    pointer.Enemy enemy_ptr
    
    for i,0,until,current_enemy_count {
        enemy_ptr = pointer.Enemy(enemy_heap[current_enemies[i]].addr)
        
        if enemy_ptr->pos.x > right_screen_limit {
            add_to_enemy_remove_queue(enemy_ptr->id, enemy_aux_heap[enemy_ptr->id].spawner)
        }
        else if enemy_ptr->pos.x < left_screen_limit {
            add_to_enemy_remove_queue(enemy_ptr->id, enemy_aux_heap[enemy_ptr->id].spawner)
        }
        else if enemy_ptr->pos.y > down_screen_limit {
            add_to_enemy_remove_queue(enemy_ptr->id, enemy_aux_heap[enemy_ptr->id].spawner)
            enemy_ptr->on_ground = true
        }
        else if enemy_ptr->pos.y < up_screen_limit {
            enemy_ptr->pos.y = up_screen_limit
            enemy_ptr->yvel = 0
        }
    }
}

void hit_enemy(pointer.Enemy enemy_ptr) {
    if enemy_ptr->enemy_type == 0 {
        hit_boomba(enemy_ptr)
    }
    if enemy_ptr->enemy_type == 1 {
        hit_flowa(enemy_ptr)
    }
    if enemy_ptr->enemy_type == 2 {
        hit_fireball(enemy_ptr)
    }
}