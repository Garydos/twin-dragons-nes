//This file is for game specific functions/defintions that are used
//accross files

volatile bool binary_search_success

byte binary_search_word(pointer.word arr, byte n, word search) {
    //Does a binary search for variable "search" in array "arr",
    //and returns the index of "search" in "arr" if it is found,
    //otherwise it returns $FF.  This function also sets the global
    //variable "binary_search_success" appropriately to indicate
    //if the search was successful or not.  "arr" must be sorted
    //lowest to highest.
    byte i
    byte k
    word temp
    
    i = 0
    while i < n {
        k = (i + n) >> 1
        temp = arr[k]
        if temp < search {
            i = k + 1
        }
        else if temp > search {
            n = k - 1
            if n > k {
                //we overflowed, stop
                i = n
            }
        }
        else {
            binary_search_success = true
            return k
        }
    }
    if i == n {
        temp = arr[i]
        if temp == search {
            binary_search_success = true
            return i
        }
    }
    binary_search_success = false
    return $FF
}

void memcpy(pointer dest, pointer src, byte size) {
    byte i
    
    for i,0,until,size {
        dest[i] = src[i]
    }
}

bool true_macro() {
    //compiler bug: sometimes assigning literal bool values
    //doesn't work, so use this function instead
    return true
}

bool false_macro() {
    //compiler bug: sometimes assigning literal bool values
    //doesn't work, so use this function instead
    return false
}

struct Box {
    byte x,
    byte y,
    byte width,
    byte height
}

//All objects that can physically collide with the background
//should have their structs' first bytes line up with the structure
//of this struct.  Polymorphism without an inheritance system, basically.
struct Phys_Obj {
    Box pos,
    byte xfrac, //fractional part of player's x coordinate, can range from 0-3 (first 2 bits)
    byte yfrac, //fractional part of player's y coordinate, can range from 0-3 (first 2 bits)
    sbyte xvel,
    sbyte yvel,
    byte on_slope,
    bool on_ground
}

struct Player {
    Box pos,
    byte xfrac, //fractional part of player's x coordinate, can range from 0-3 (first 2 bits)
    byte yfrac, //fractional part of player's y coordinate, can range from 0-3 (first 2 bits)
    sbyte xvel,
    sbyte yvel,
    byte on_slope,
    bool on_ground,
    sbyte xaccel,
    sbyte yaccel,
    byte xspeed,
    bool jumping,
    bool can_jump,
    Anim anim,
    bool mirroring,  //is the frame mirrored or not?
    sbyte health,
    bool invincible,
    byte invincibility_timer,
    bool controllable,
    byte attack_timer
}
//velocities are added to playerx_frac and playery_frac, so they should be treated as
//fractional parts (i.e. playerxvel = 4 means playerx will increase by 1, playerxvel = 8
//means playerx will increase by 2, etc...)

struct Enemy {
    Box pos,
    byte xfrac, //fractional part of player's x coordinate, can range from 0-3 (first 2 bits)
    byte yfrac, //fractional part of player's y coordinate, can range from 0-3 (first 2 bits)
    sbyte xvel,
    sbyte yvel,
    byte on_slope,
    bool on_ground,
    byte id,
    byte enemy_type,
    Anim anim,
    bool mirroring
}

//These structs contain other variables different enemies need
struct Enemy_Aux {
    byte spawner, //reference number for spawner, used to respawn
    byte aux0,
    byte aux1,
    byte aux2
}

struct Anim {
    byte anim_num,  //current animation number
    byte anim_frame, //current frame of current animation
    byte frame_timer //amount of game frames left to show current animation frame
}